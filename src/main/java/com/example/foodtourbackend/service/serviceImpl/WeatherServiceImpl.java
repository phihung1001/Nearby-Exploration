package com.example.foodtourbackend.service.serviceImpl;

import com.example.foodtourbackend.DTO.OpenMeteoResponse;
import com.example.foodtourbackend.DTO.HourlyForecastDTO;
import com.example.foodtourbackend.DTO.WeatherDTO;
import com.example.foodtourbackend.service.WeatherService;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Tri·ªÉn khai d·ªãch v·ª• th·ªùi ti·∫øt, l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ Open-Meteo API
 * v√† th√¥ng tin v·ªã tr√≠ t·ª´ OpenStreetMap (Nominatim API).
 */
@RequiredArgsConstructor
@Service
public class WeatherServiceImpl implements WeatherService {

  private final WebClient webClient;
  private final ObjectMapper objectMapper;

  // B·∫£n ƒë·ªì √°nh x·∫° m√£ th·ªùi ti·∫øt sang bi·ªÉu t∆∞·ª£ng t∆∞∆°ng ·ª©ng
  private static final Map<Integer, String> WEATHER_ICONS = Map.of(
    0, "‚òÄÔ∏è", 1, "üå§Ô∏è", 2, "‚õÖ", 3, "‚òÅÔ∏è",
    45, "üå´Ô∏è", 51, "üå¶Ô∏è", 61, "üåßÔ∏è",
    71, "‚ùÑÔ∏è", 80, "üå¶Ô∏è", 95, "‚õàÔ∏è"
  );

  // B·∫£n ƒë·ªì m√£ th·ªùi ti·∫øt sang m√¥ t·∫£ ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt b·∫±ng ti·∫øng Anh
  private static final Map<Integer, String> WEATHER_CONDITIONS_EN = Map.of(
    0, "Clear", 1, "Mainly Clear", 2, "Partly Cloudy", 3, "Overcast"
  );

  // B·∫£n ƒë·ªì m√£ th·ªùi ti·∫øt sang m√¥ t·∫£ ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt b·∫±ng ti·∫øng Vi·ªát
  private static final Map<Integer, String> WEATHER_CONDITIONS_VI = Map.of(
    0, "Tr·ªùi quang", 1, "C√≥ n·∫Øng nh·∫π", 2, "C√≥ m√¢y r·∫£i r√°c", 3, "Tr·ªùi √¢m u"
  );

  /**
   * L·∫•y bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt t·ª´ m√£ th·ªùi ti·∫øt
   * @param code M√£ th·ªùi ti·∫øt
   * @return Bi·ªÉu t∆∞·ª£ng t∆∞∆°ng ·ª©ng ho·∫∑c m·∫∑c ƒë·ªãnh l√† üå°Ô∏è
   */
  private String getWeatherIcon(int code) {
    return WEATHER_ICONS.getOrDefault(code, "üå°Ô∏è");
  }

  /**
   * L·∫•y m√¥ t·∫£ ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt b·∫±ng ti·∫øng Anh
   * @param code M√£ th·ªùi ti·∫øt
   * @return M√¥ t·∫£ t∆∞∆°ng ·ª©ng ho·∫∑c "Unknown" n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
   */
  private String getWeatherConditionEn(int code) {
    return WEATHER_CONDITIONS_EN.getOrDefault(code, "Unknown");
  }

  /**
   * L·∫•y m√¥ t·∫£ ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt b·∫±ng ti·∫øng Vi·ªát
   * @param code M√£ th·ªùi ti·∫øt
   * @return M√¥ t·∫£ t∆∞∆°ng ·ª©ng ho·∫∑c "Kh√¥ng x√°c ƒë·ªãnh" n·∫øu kh√¥ng t√¨m th·∫•y
   */
  private String getWeatherConditionVi(int code) {
    return WEATHER_CONDITIONS_VI.getOrDefault(code, "Kh√¥ng x√°c ƒë·ªãnh");
  }

  /**
   * L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt v√† th√¥ng tin v·ªã tr√≠ t·ª´ API
   * @param latitude Vƒ© ƒë·ªô
   * @param longitude Kinh ƒë·ªô
   * @param startHour Gi·ªù b·∫Øt ƒë·∫ßu d·ª± b√°o
   * @param endHour Gi·ªù k·∫øt th√∫c d·ª± b√°o
   * @param timezone M√∫i gi·ªù
   * @return ƒê·ªëi t∆∞·ª£ng Mono ch·ª©a th√¥ng tin th·ªùi ti·∫øt
   */
  public Mono<?> getWeatherData(double latitude, double longitude, String startHour, String endHour, String timezone) {
    String weatherApiUrl = "https://api.open-meteo.com/v1/forecast";
    String geoApiUrl = "https://nominatim.openstreetmap.org/reverse";

    // G·ªçi API th·ªùi ti·∫øt
    Mono<String> weatherJsonMono = webClient.mutate().baseUrl(weatherApiUrl).build().get()
      .uri(uriBuilder -> uriBuilder.queryParam("latitude", latitude)
        .queryParam("longitude", longitude)
        .queryParam("hourly", "temperature_2m,weather_code,relative_humidity_2m,uv_index")
        .queryParam("start_hour", startHour)
        .queryParam("end_hour", endHour)
        .queryParam("current", "temperature_2m,weather_code,relative_humidity_2m,uv_index")
        .queryParam("timezone", timezone)
        .build())
      .retrieve().bodyToMono(String.class).onErrorReturn("{}");

    // G·ªçi API v·ªã tr√≠
    Mono<String> geoJsonMono = webClient.mutate().baseUrl(geoApiUrl).build().get()
      .uri(uriBuilder -> uriBuilder.queryParam("format", "json")
        .queryParam("lat", latitude)
        .queryParam("lon", longitude)
        .queryParam("zoom", 10)
        .build())
      .retrieve().bodyToMono(String.class).onErrorReturn("{}");

    // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ c·∫£ hai API
    return Mono.zip(weatherJsonMono, geoJsonMono).map(tuple -> {
      String weatherJson = tuple.getT1();
      String geoJson = tuple.getT2();

      try {
        OpenMeteoResponse response = objectMapper.readValue(weatherJson, OpenMeteoResponse.class);

        // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Weather v√† √°nh x·∫° d·ªØ li·ªáu
        OpenMeteoResponse.CurrentWeather currentWeather = response.getCurrent();
        WeatherDTO weatherDTO = new WeatherDTO();
        weatherDTO.setTemperature(currentWeather.getTemperature_2m());
        weatherDTO.setCondition(getWeatherConditionEn(currentWeather.getWeather_code()));
        weatherDTO.setConditionText(getWeatherConditionVi(currentWeather.getWeather_code()));
        weatherDTO.setLocation(objectMapper.readTree(geoJson).path("display_name").asText("Unknown"));
        weatherDTO.setHumidity(currentWeather.getRelative_humidity_2m());
        weatherDTO.setUvIndex(currentWeather.getUv_index());

        // T·∫°o danh s√°ch d·ª± b√°o theo gi·ªù
        List<HourlyForecastDTO> hourlyForecastDTOS = IntStream.range(0, response.getHourly().getTime().size())
          .mapToObj(i -> new HourlyForecastDTO(
            response.getHourly().getTime().get(i),
            response.getHourly().getTemperature_2m().get(i),
            getWeatherIcon(response.getHourly().getWeather_code().get(i))
          )).collect(Collectors.toList());

        weatherDTO.setForecast(hourlyForecastDTOS);
        return weatherDTO;
      } catch (Exception e) {
        throw new RuntimeException("L·ªói khi ph√¢n t√≠ch JSON th·ªùi ti·∫øt", e);
      }
    });
  }
}